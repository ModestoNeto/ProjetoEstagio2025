import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:intl/intl.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Lembretes Visuais',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: ReminderScreen(),
    );
  }
}

class ReminderScreen extends StatefulWidget {
  @override
  _ReminderScreenState createState() => _ReminderScreenState();
}

class _ReminderScreenState extends State<ReminderScreen> {
  final TextEditingController _titleController = TextEditingController();
  DateTime? _selectedDateTime;
  List<Map<String, dynamic>> _reminders = [];
  final FlutterLocalNotificationsPlugin _notificationsPlugin = FlutterLocalNotificationsPlugin();

  @override
  void initState() {
    super.initState();
    _initializeNotifications();
  }

  // Configuração das notificações
  void _initializeNotifications() async {
    const AndroidInitializationSettings androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    final InitializationSettings settings = InitializationSettings(android: androidSettings);
    await _notificationsPlugin.initialize(settings);
  }

  // Exibir notificações
  Future<void> _showNotification(String title) async {
    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'reminder_channel', 'Lembretes',
      importance: Importance.high, priority: Priority.high, playSound: true,
    );

    const NotificationDetails details = NotificationDetails(android: androidDetails);
    await _notificationsPlugin.show(0, 'Lembrete', title, details);
  }

  // Adicionar lembrete
  void _addReminder() {
    if (_titleController.text.isEmpty || _selectedDateTime == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Preencha todos os campos!"))
      );
      return;
    }

    setState(() {
      _reminders.add({
        'title': _titleController.text,
        'dateTime': _selectedDateTime,
      });
    });

    // Agendar a notificação
    _scheduleNotification(_titleController.text, _selectedDateTime!);

    _titleController.clear();
    _selectedDateTime = null;
  }

  // Agendar notificação para o lembrete
  Future<void> _scheduleNotification(String title, DateTime dateTime) async {
    final int id = dateTime.millisecondsSinceEpoch % 100000;
    
    final AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'reminder_channel', 'Lembretes',
      importance: Importance.high, priority: Priority.high, playSound: true,
    );

    final NotificationDetails details = NotificationDetails(android: androidDetails);

    await _notificationsPlugin.zonedSchedule(
      id,
      'Lembrete',
      title,
      dateTime.toUtc(),
      details,
      androidAllowWhileIdle: true,
      matchDateTimeComponents: DateTimeComponents.time,
      uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.absoluteTime,
    );
  }

  // Escolher data e hora
  Future<void> _pickDateTime() async {
    DateTime now = DateTime.now();
    DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: now,
      firstDate: now,
      lastDate: DateTime(2100),
    );

    if (pickedDate != null) {
      TimeOfDay? pickedTime = await showTimePicker(
        context: context,
        initialTime: TimeOfDay.now(),
      );

      if (pickedTime != null) {
        setState(() {
          _selectedDateTime = DateTime(
            pickedDate.year, pickedDate.month, pickedDate.day,
            pickedTime.hour, pickedTime.minute,
          );
        });
      }
    }
  }

  // Excluir lembrete
  void _removeReminder(int index) {
    setState(() {
      _reminders.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Lembretes Visuais')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _titleController,
              decoration: InputDecoration(labelText: 'Título do Lembrete'),
            ),
            SizedBox(height: 10),
            Row(
              children: [
                Text(
                  _selectedDateTime == null
                      ? 'Selecione a Data e Hora'
                      : DateFormat('dd/MM/yyyy HH:mm').format(_selectedDateTime!),
                ),
                Spacer(),
                ElevatedButton(
                  onPressed: _pickDateTime,
                  child: Text('Escolher'),
                ),
              ],
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _addReminder,
              child: Text('Adicionar Lembrete'),
            ),
            SizedBox(height: 20),
            Expanded(
              child: ListView.builder(
                itemCount: _reminders.length,
                itemBuilder: (context, index) {
                  return Card(
                    child: ListTile(
                      title: Text(_reminders[index]['title']),
                      subtitle: Text(DateFormat('dd/MM/yyyy HH:mm').format(_reminders[index]['dateTime'])),
                      trailing: IconButton(
                        icon: Icon(Icons.delete, color: Colors.red),
                        onPressed: () => _removeReminder(index),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
